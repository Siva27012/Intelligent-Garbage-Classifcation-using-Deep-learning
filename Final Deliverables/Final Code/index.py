# -*- coding: utf-8 -*-
"""index.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vXWFCDZdR7fAUw2gPv1XgvAQ8EGkFFId
"""

from __future__ import division, print_function

#coding-utf-8

import sys

import os

import glob

import numpy as np

from tensorflow.keras.preprocessing import image

from tensorflow.keras.models import Sequential

from tensorflow.keras.layers import Dense

from tensorflow.keras.layers import Dropout

from tensorflow.keras.applications.imagenet_utils import preprocess_input, decode_predictions

from tensorflow.keras.models import load_model

from tensorflow.keras import backend

from tensorflow.keras import backend

from tensorflow import keras

import tensorflow as tf

from skimage.transform import resize


from flask import Flask, redirect, url_for, request, render_template

from werkzeug.utils import secure_filename 
from gevent.pywsgi import WSGIServer

from __future__ import division, print_function
import sys

@app.route('/',methods=['GET'])

def index () : 

  return render_template ('index.html')

@app.route('/Image', methods=['POST', 'GET'])\
 def prediction (): 

return render_template('base.html')

@app.route('/predict', methods=['GET', 'POST'])

def upload():

if request.method == 'POST':
   f= request.files ['image']


basepath= os.path.dirname('/content/drive/MyDrive/Dataset/Garbage classification/Garbage classification')

file_path = os.path.join(

basepath, 'predictions', f.filename)

f.save(file_path)

img=image.load_img(file_path, target_size=(128, 128))

x = image.img_to_ray (img)
x= np.expand_dims (x, axis=0)

preds=model.predict_classes (x)

index = ['cardboard', 'glass', 'metal', 'paper', 'plastic', 'trash']

text = "The Predicted Garbage is : "+str(index [preds[0]])


return text

img-image.load_img(r"/content/drive/MyDrive/Dataset/Garbage classification/Garbage classification/glass/glass17.jpg", target_size=(128,128))

x=image.img_to_array(img) #converting in to array format

x=np.expand_dims(x,axis-0) #changing its dimensions as per our requirement

#img_dato-preprocess_input(x)

#img_data.shape

a-np.argmax(model.predict(x), axis=1)

@app.route('/predict',methods=['GET', 'POST'])

def upload():